Activity 生命周期
1. onCreate()
2. onStart() Activity可见状态，但没有焦点不能交互
3. onResume() Activity可见，获得焦点，可以交互
4. onPause() Activity可见，但失去焦点不可与用户交互
5. onStop() Activity不可见，但失去焦点
6. onDestroy()

Activity四种启动模式
1. standard 模式
    默认模式，每次激活Activity时都会创建Activity实例，并放入任务栈中
2. singleTop 模式
    如果在任务的栈顶正好存在该Activity的实例，就重用该实例( 会调用实例的 onNewIntent() )，
    否则就会创建新的实例并放入栈顶，即使栈中已经存在该Activity的实例，只要不在栈顶，都会创建新的实例
3. singleTask 模式
    如果在栈中已经有该Activity的实例，就重用该实例(会调用实例的 onNewIntent() )。
    重用时，会让该实例回到栈顶，因此在它上面的实例将会被移出栈。
    如果栈中不存在该实例，将会创建新的实例放入栈中
4. singleInstance 模式
    Activity会单独占用一个Task栈，具有全局唯一性，即整个系统中就这么一个实例

自定义View (Measure -> Layout -> Draw)
1. onMeasure() 测量大小
2. onLayout()   如何摆放(子)View
3. onDraw() 绘制View

Touch事件传递机制
    public boolean dispatchTouchEvent(MotionEventev);
    //用来分派event
    public boolean onInterceptTouchEvent(MotionEventev);
    //用来拦截event
    public boolean onTouchEvent(MotionEventev);
    //用来处理event

    其中Activity和View控件（TextView）拥有分派和处理事件方法，
    View容器（LinearLayout）具有分派，拦截，处理事件方法。

Android 动画
    FrameAnimation（逐帧动画）：将多张图片组合起来进行播放，
    TweenAnimation（补间动画）：是对某个View进行一系列的动画的操作，包括淡入淡出（Alpha），缩放（Scale），平移（Translate），旋转（Rotate）四种模式。
    PropertyAnimation（属性动画）：通过改变View属性，得到动画效果。

非静态内部类，匿名内部类，持有外部类对象，注意内存泄漏

RxJava
Observable(被观察者)  Observer(观察者) 通过 subscribe() 方法产生订阅关系
Scheduler(调度器) 线程控制
    SubscribeOn 只调用一次，多余调用无效。如需多次切换线程，使用doOnSubscribe()
        指定Observable自身在哪个调度器上执行（事件产生的线程）
    ObserveOn 可多次调用，控制的是它后面的线程。
        指定一个观察者在哪个调度器上观察这个Observable（事件消费的线程）

RxBus实现原理
    public abstract class Subject<T> extends Observable<T> implements Observer<T>
    Subject继承了Observable也实现了Observer接口，所以它既是发布者，也是订阅者。
    １.创建全局的可发送可接收消息的Subject实例
    ２.通过subject.subscribe()给自己添加订阅者(subscriber/observaber)
    ３.通过subject.onNext()调用所有订阅者的执行方法，即所谓的”发送消息”。

Map 它有四个实现类,分别是HashMap Hashtable LinkedHashMap 和TreeMap.
1. Hashmap 遍历取得数据的顺序是完全随机的
2. LinkedHashMap 是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，
    先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。

常见数据结构
1. 线性表
    实现线性表的方式一般有两种，
    一种是使用数组存储线性表的元素，即用一组连续的存储单元依次存储线性表的数据元素。
    另一种是使用链表存储线性表的元素，即用一组任意的存储单元存储线性表的数据元素（存储单元可以是连续的，也可以是不连续的）。
    1 数组 优点：查询、修改比较快；缺点：增加、删除比较慢
    2 链表 优点：增加、删除比较快；缺点：查询、修改比较慢

2. 栈与队列
    栈和队列也是比较常见的数据结构，它们是比较特殊的线性表，
    因为对于栈来说，访问、插入和删除元素只能在栈顶进行，
    对于队列来说，元素只能从队列尾插入，从队列头访问和删除。

3. 树、二叉树、平衡二叉树、红黑树
4. 图

ArrayList主要是用数组来存储元素，
LinkedList主要是用链表来存储元素，
HashMap的底层实现主要是借助数组+链表+红黑树来实现。

单例模式：
    当这个类的对象在多个地方创建的时候，使得内部的方法多次调用，但是我们希望只要一个对象操作这个方法，
    或者不希望多个地方同时调用这个方法，我们需要保持这个方法的单一性质，我们就用单利模式吧。


什么是AOT、JIT编译模式
    JIT，Just-in-time,动态(即时)编译，边运行边编译；
    AOT，Ahead Of Time，指运行前编译，是两种程序的编译方式
    flutter
        debug版   采用JIT模式
        release版 采用AOT模式


Android中子线程真的不能更新UI吗？
    在OnCreate()方法中，子线程是可以更新UI的
        原理：ViewRootImpl是在onResume()调用之后才创建，检测是否是UI线程，

ViewRootImpl
    视图绘制、事件分发作用

Window、Activity、DecorView以及ViewRoot之间的错综关系，以及如何创建并显示DecorView。
Activity就像个控制器，不负责视图部分。
Window像个承载器，装着内部视图。
DecorView就是个顶层视图，是所有View的最外层布局。
ViewRoot像个连接器，负责沟通，通过硬件的感知来通知视图，进行用户之间的交互。

一个Activity只有一个DecorView（ViewRoot），也只有一个Window。

WindowManager:
    对 Window 的访问必须通过 WindowManager。
    WindowManager 提供的三个接口方法 addView、updateViewLayout 以及 removeView
    WindowManager 是一个接口，它的真正实现是 WindowManagerImpl 类：
    WindowManagerImpl 并没有直接实现 Window 的三大操作，而是交给了 WindowManagerGlobal(一个进程就只有一个WindowManagerGlobal对象) 来处理
        ：创建ViewRootImpl，view操作（添加、更新、删除）
    ViewRootImpl：
        将window添加到windowManagerService

Activity的Window创建
    Activity 的 Window 创建就发生在 attach 方法里
        DecorView 创建 发生在PhoneWindow中

PopupWindow
    1.设置背景Background
        有背景则会在传入的contentView外面包一层PopupViewContainer 之后作为mPopupView
        PopupViewContainer，继承FrameLayout，这个类中，处理了返回键和点击外部事件，popupwindow会消失
    2.没有设置背景
        点击Back返回键和点击PopupWindow以外的区域,PopupWindow不会消失

Window 类型：
    分三种类型：应用窗口，子窗口，系统窗口
    其中，Activity与Dialog属于应用窗口、PopupWindow属于子窗口，必须依附到其他非子窗口才能存在，而Toast属于系统窗口，
    Dialog可能比较特殊，从表现上来说偏向于子窗口，必须依附Activity才能存在，但是从性质上来说，仍然是应用窗口，有自己的WindowToken。

Binder机制
Handle机制

1、我们先说下什么是Android消息处理机制？
    消息处理机制本质：一个线程开启循环模式持续监听并依次处理其他线程给它发的消息。
    简单的说：一个线程开启一个无限循环模式，不断遍历自己的消息列表，如果有消息就挨个拿出来做处理，
        如果列表没消息，自己就堵塞（相当于wait，让出cpu资源给其他线程），其他线程如果想让该线程做什么事，
        就往该线程的消息队列插入消息，该线程会不断从队列里拿出消息做处理。

1、Looper
对于Looper主要是prepare()和loop()两个方法。
    perpare() 首先检查当前线程是否有looper对象，有的话会抛出异常。没有的话，会创建looper对象，并与当前线程绑定。同时创建MessageQueue对象
    所以，一个线程是有一个Looper对象、一个MessageQueue（消息队列）对象
一个线程中只有一个Looper实例
Looper,在构造方法中会创建MessageQueue（消息队列）对象，
MessageQueue，通过next()方法取出Message（消息）对象。
    for (;;) {} 无限循环
Message recycle()释放消息占用的资源

Looper主要作用：
1、	与当前线程绑定，保证一个线程只会有一个Looper实例，同时一个Looper实例也只有一个MessageQueue。
2、	loop()方法，不断从MessageQueue中去取消息，交给消息的target属性的dispatchMessage去处理。

Handler
通过Hander构造方法，拿到当前线程中保存的Looper、MessageQueue对象
Handler的sendMessage方法
    作用：会给msg的target(也就是Hander对象)赋值为当前Handler自身，然后将Message(消息)对象放到MessageQueue(消息队列)中
    然后由于调用Loop.loop()方法，该方法中有一个无限循环体，会一直查询是否有消息，
    一有消息，它就会调用hander的handleMessage方法，来处理消息。
Handler的Post(Runnable r)方法：
    handler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO 更新UI
                    }
                });
    将Runable对象作为callback属性，赋值给了此message，并不会创建线程
Handler中的Callback 接口，一般为null,会直接调用Handler的handleMessage()来处理消息
   但是Handler的post()方法，则会将runable对象赋值给callback,最终调用runnablede run方法

ActivityThread(主线程) main 方法中，会初始化 Looper.prepareMainLooper();Looper.loop();

Handler的两大用法：1）在子线程中更新主线程；2）延迟处理

Handler内存泄漏
    原因：非静态内部类，默认持有外部类引用。Message持有Handler引用，
        Handler持有Activity引用，如果发射延迟消息，会导致内存泄漏。

    解决：
        1. static声明Handler
        2. 弱引用
        3. ondestroy中取消所有任务，并置空；

Activity的生命周期函数是谁调用的？
    是ActivityThread调度的， 具体逻辑封装在Instrumentation类里

ActivityMonitor